{"version":3,"file":"errors.mjs","sources":["../src/errors.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Provides the errors for the serialization module.\n * @module @nhtio/web-serialization/errors\n */\n\nimport type { ValidationError } from 'joi'\nimport type { EncodedStructuredData } from './lib/constants_rules'\n\ninterface SerializationErrorOptions {\n  /**\n   * The cause data property of an Error instance indicates the specific original cause of the error.\n   */\n  cause?: Error\n  /**\n   * How many rows to trim from the stack trace.\n   * This is useful for removing the stack trace of the current function from the error.\n   */\n  trim?: number\n}\n\n/* v8 ignore next 62 */\nconst SerializationError = class extends TypeError {\n  /** @private */\n  readonly $__name: string\n  /** @private */\n  readonly $__message: string\n\n  constructor(name: string, message: string, options?: SerializationErrorOptions) {\n    const superOptions = options ? { cause: options.cause } : {}\n    super(message, superOptions)\n    const ErrorConstructor = this.constructor\n    Object.setPrototypeOf(this, ErrorConstructor)\n    this.$__name = name\n    this.$__message = message\n    if ('function' === typeof Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorConstructor)\n    }\n    if ('string' !== typeof this.stack) {\n      Object.defineProperty(this, 'stack', {\n        value: '',\n        writable: true,\n        enumerable: false,\n        configurable: true,\n      })\n    }\n    if (this.stack && options && options.trim && options.trim > 0) {\n      const stackLines = this.stack.split('\\n')\n      stackLines.splice(0, options.trim)\n      this.stack = stackLines.join('\\n')\n    }\n    Object.defineProperty(this, 'name', {\n      get: () => this.$__name,\n      enumerable: true,\n      configurable: false,\n    })\n    Object.defineProperty(this, 'message', {\n      get: () => this.$__message,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /** @private */\n  get name() {\n    return this.$__name\n  }\n\n  /** @private */\n  get message() {\n    return this.$__message\n  }\n\n  /** @private */\n  get [Symbol.toStringTag]() {\n    return this.constructor.name\n  }\n\n  /** @private */\n  toString() {\n    return `${this.name}: ${this.message}`\n  }\n\n  /** @private */\n  [Symbol.toPrimitive](hint: 'number' | 'string' | 'default') {\n    switch (hint) {\n      case 'string':\n        return this.toString()\n      default:\n        return true\n    }\n  }\n\n  /** @private */\n  static [Symbol.hasInstance](instance: unknown) {\n    if ((typeof instance === 'object' && instance !== null) || typeof instance === 'function') {\n      const proto = Object.getPrototypeOf(instance)\n      return proto.name === this.name || proto === this\n    }\n    return false\n  }\n}\n\nconst messageFromJoiValidationError = (\n  reason: ValidationError | undefined,\n  fallback: string,\n  prepend?: string\n) => {\n  return reason\n    ? [\n        prepend,\n        reason.details ? reason.details.map((d) => d.message).join(' and ') : reason.message,\n      ]\n        .filter((v) => 'string' === typeof v)\n        .join(' ')\n    : fallback\n}\n\n/**\n * Thrown when the value cannot be serialized.\n */\nexport class E_PAYLOAD_UNSERIALIZABLE extends SerializationError {\n  /** @private */\n  constructor(reason: ValidationError) {\n    const msg = messageFromJoiValidationError(\n      reason,\n      'Cannot serialize this value',\n      'Cannot serialize this value:'\n    )\n    super('E_PAYLOAD_UNSERIALIZABLE', msg)\n  }\n}\n\n/**\n * Thrown when an encoding rule conflicts with default serialization rules.\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_RULE_CONFLICT extends SerializationError {\n  /** @private */\n  constructor(key: string) {\n    const msg = `Encoding rule \"${key}\" conflicts with default serialization rules.`\n    super('E_RULE_CONFLICT', msg)\n  }\n}\n\n/**\n * Thrown when a value cannot be serialized\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_VALUE_UNSERIALIZABLE extends SerializationError {\n  readonly #type: string\n  readonly #inspection: string\n  /** @private */\n  constructor(value: unknown) {\n    const msg = `Encountered an unserializable value`\n    super('E_VALUE_UNSERIALIZABLE', msg)\n    this.#type = typeof value\n    this.#inspection = ''\n    Object.defineProperty(this, 'kind', {\n      get: () => this.#type,\n      enumerable: true,\n      configurable: false,\n    })\n    Object.defineProperty(this, 'inspection', {\n      get: () => this.#inspection,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The result of the `typeof` operator on the value that caused the error.\n   */\n  get kind() {\n    return this.#type\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The result of the `inspect` function on the value that caused the error.\n   */\n  get inspection() {\n    return this.#inspection\n  }\n}\n\n/**\n * Thrown when a value cannot be serialized\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_VALUE_UNDESERIALIZABLE extends SerializationError {\n  readonly #type: EncodedStructuredData['key']\n  /** @private */\n  constructor(value: EncodedStructuredData, cause?: Error) {\n    const msg = `Encountered a value which cannot be deserialized`\n    super('E_VALUE_UNDESERIALIZABLE', msg, { cause })\n    this.#type = value.key || 'unknown'\n    Object.defineProperty(this, 'kind', {\n      get: () => this.#type,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /* v8 ignore next 7 */\n  /**\n   * The structured data key that caused the error.\n   * @remarks This is used to identify the type of the value that caused the error.\n   */\n  get kind() {\n    return this.#type || 'unknown'\n  }\n}\n\n/**\n * Thrown when a value cannot be serialized\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_VALUE_UNPARSEABLE extends SerializationError {\n  /** @private */\n  constructor(cause?: Error) {\n    const msg = `Encountered a value which cannot be parsed in order to be deserialized`\n    super('E_VALUE_UNPARSEABLE', msg, { cause })\n  }\n}\n\n/**\n * Thrown when a value which is being deserialized is from a future version of the library.\n * @remarks This error is thrown when the version of the library used to serialize the value is greater than the current version.\n * This is used to prevent deserializing values which may not be compatible with the current version of the library.\n */\nexport class E_VALUE_FROM_FUTURE_VERSION extends SerializationError {\n  readonly #version: string\n  /** @private */\n  constructor(version: string) {\n    const msg = `Value was serialized with version ${version}, but the current version is ${__VERSION__}`\n    super('E_VALUE_FROM_FUTURE_VERSION', msg)\n    this.#version = version\n    Object.defineProperty(this, 'version', {\n      get: () => this.#version,\n      enumerable: true,\n      configurable: false,\n    })\n    Object.defineProperty(this, 'current', {\n      get: () => __VERSION__,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The version that caused the error.\n   */\n  get version() {\n    return this.#version\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The current version of the library.\n   */\n  get current() {\n    return __VERSION__\n  }\n}\n\n/**\n * Displayed when a value which is being deserialized is from a past version of the library.\n * @remarks This error is shown in the console when the version of the library used to serialize the value is less than the current version.\n * This is used to warn the user that the value may not be compatible with the current version of the library.\n */\nexport const W_VALUE_FROM_PAST_VERSION = (version: string) =>\n  new Error(\n    `Value was serialized with version ${version}, but the current version is ${__VERSION__}`\n  )\n"],"names":["SerializationError","name","message","options","superOptions","__publicField","ErrorConstructor","stackLines","hint","instance","proto","messageFromJoiValidationError","reason","fallback","prepend","d","v","E_PAYLOAD_UNSERIALIZABLE","msg","E_RULE_CONFLICT","key","_type","_inspection","E_VALUE_UNSERIALIZABLE","value","__privateAdd","__privateSet","__privateGet","E_VALUE_UNDESERIALIZABLE","cause","E_VALUE_UNPARSEABLE","_version","E_VALUE_FROM_FUTURE_VERSION","version","W_VALUE_FROM_PAST_VERSION"],"mappings":"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"}