{"version":3,"file":"errors-Cqo3rABf.mjs","sources":["../src/errors.ts"],"sourcesContent":["/**\n * Easily accessible error classes for Swarm\n * @module @nhtio/swarm/errors\n */\n\n/**\n * Describes the options for the SwarmError class.\n */\nexport interface SwarmErrorOptions {\n  /**\n   * The cause data property of an Error instance indicates the specific original cause of the error.\n   */\n  cause?: Error\n  /**\n   * How many rows to trim from the stack trace.\n   * This is useful for removing the stack trace of the current function from the error.\n   */\n  trim?: number\n}\n\n/**\n * Base class for all Swarm errors.\n * @extends Error\n */\nclass SwarmError extends Error {\n  /** @private */\n  readonly $__name: string\n  /** @private */\n  readonly $__message: string\n\n  /**\n   * Creates a new SwarmError instance.\n   * @param message The error message.\n   * @param options The error options.\n   */\n  constructor(message: string, options?: SwarmErrorOptions) {\n    const superOptions = options ? { cause: options.cause } : {}\n    super(message, superOptions)\n    const ErrorConstructor = this.constructor\n    Object.setPrototypeOf(this, ErrorConstructor)\n    this.$__name = ErrorConstructor.name\n    this.$__message = message\n    if ('function' === typeof Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorConstructor)\n    }\n    if (this.stack && options && options.trim && options.trim > 0) {\n      const stackLines = this.stack.split('\\n')\n      stackLines.splice(0, options.trim)\n      this.stack = stackLines.join('\\n')\n    }\n  }\n\n  get name() {\n    return this.$__name\n  }\n\n  get message() {\n    return this.$__message\n  }\n\n  get [Symbol.toStringTag]() {\n    return this.constructor.name\n  }\n\n  toString() {\n    return `${this.name}: ${this.message}`\n  }\n\n  [Symbol.toPrimitive](hint: 'number' | 'string' | 'default') {\n    switch (hint) {\n      case 'string':\n        return this.toString()\n      default:\n        return true\n    }\n  }\n\n  static [Symbol.hasInstance](instance: unknown) {\n    if ((typeof instance === 'object' && instance !== null) || typeof instance === 'function') {\n      const proto = Object.getPrototypeOf(instance)\n      return proto.name === this.name || proto === this\n    }\n    return false\n  }\n}\n\nexport type { SwarmError }\n\n/**\n * Thrown by the {@link @nhtio/swarm!Swarm | Swarm} class when trying to be initialized in an environment that does not support Service Workers.\n */\nexport class UnsupportedEnvironmentError extends SwarmError {\n  constructor() {\n    super('Unable to setup instance because Service Workers are not supported in this environment')\n  }\n}\n\n/**\n * Thrown by the {@link @nhtio/swarm!Swarm | Swarm} class when trying to be initialize more than one instance within the same context.\n */\nexport class AlreadyInitializedInContextError extends SwarmError {\n  constructor() {\n    super(\n      'Unable to setup instance because another instance is already initialized in this context'\n    )\n  }\n}\n\n/**\n * Thrown by the {@link @nhtio/swarm!Swarm | Swarm} class when a request to the leader is not answered.\n */\nexport class RequestTimeoutError extends SwarmError {\n  constructor(event: string | number | symbol) {\n    super(`Request timed out while waiting for event \"${String(event)}\".`)\n  }\n}\n\n/**\n * Thrown by the {@link @nhtio/swarm!Swarm | Swarm} class trying to retrieve an instance without having previously or currently provided an encryption key.\n */\nexport class MissingEncryptionKey extends SwarmError {\n  constructor() {\n    super(`An encryption key has not been provided at any point in the runtime.`)\n  }\n}\n"],"names":["SwarmError","message","options","superOptions","__publicField","ErrorConstructor","stackLines","hint","instance","proto","UnsupportedEnvironmentError","AlreadyInitializedInContextError","RequestTimeoutError","event","MissingEncryptionKey"],"mappings":";;;AAwBA,MAAMA,UAAmB,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW7B,YAAYC,GAAiBC,GAA6B;AACxD,UAAMC,IAAeD,IAAU,EAAE,OAAOA,EAAQ,UAAU;AAC1D,UAAMD,GAASE,CAAY;AAXpB;AAAA,IAAAC,EAAA;AAEA;AAAA,IAAAA,EAAA;AAUP,UAAMC,IAAmB,KAAK;AAO9B,QANO,OAAA,eAAe,MAAMA,CAAgB,GAC5C,KAAK,UAAUA,EAAiB,MAChC,KAAK,aAAaJ,GACC,OAAO,MAAM,qBAA5B,cACI,MAAA,kBAAkB,MAAMI,CAAgB,GAE5C,KAAK,SAASH,KAAWA,EAAQ,QAAQA,EAAQ,OAAO,GAAG;AAC7D,YAAMI,IAAa,KAAK,MAAM,MAAM;AAAA,CAAI;AAC7B,MAAAA,EAAA,OAAO,GAAGJ,EAAQ,IAAI,GAC5B,KAAA,QAAQI,EAAW,KAAK;AAAA,CAAI;AAAA,IACnC;AAAA,EACF;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,KAAK,OAAO,WAAW,IAAI;AACzB,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA,EAEA,WAAW;AACT,WAAO,GAAG,KAAK,IAAI,KAAK,KAAK,OAAO;AAAA,EACtC;AAAA,EAEA,CAAC,OAAO,WAAW,EAAEC,GAAuC;AAC1D,YAAQA,GAAM;AAAA,MACZ,KAAK;AACH,eAAO,KAAK;MACd;AACS,eAAA;AAAA,IACX;AAAA,EACF;AAAA,EAEA,QAAQ,OAAO,WAAW,EAAEC,GAAmB;AAC7C,QAAK,OAAOA,KAAa,YAAYA,MAAa,QAAS,OAAOA,KAAa,YAAY;AACnF,YAAAC,IAAQ,OAAO,eAAeD,CAAQ;AAC5C,aAAOC,EAAM,SAAS,KAAK,QAAQA,MAAU;AAAA,IAC/C;AACO,WAAA;AAAA,EACT;AACF;AAOO,MAAMC,UAAoCV,EAAW;AAAA,EAC1D,cAAc;AACZ,UAAM,wFAAwF;AAAA,EAChG;AACF;AAKO,MAAMW,UAAyCX,EAAW;AAAA,EAC/D,cAAc;AACZ;AAAA,MACE;AAAA,IAAA;AAAA,EAEJ;AACF;AAKO,MAAMY,UAA4BZ,EAAW;AAAA,EAClD,YAAYa,GAAiC;AAC3C,UAAM,8CAA8C,OAAOA,CAAK,CAAC,IAAI;AAAA,EACvE;AACF;AAKO,MAAMC,UAA6Bd,EAAW;AAAA,EACnD,cAAc;AACZ,UAAM,sEAAsE;AAAA,EAC9E;AACF;;;;;;;;"}