{"version":3,"file":"errors.cjs","sources":["../src/errors.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Provides the errors for the serialization module.\n * @module @nhtio/web-serialization/errors\n */\n\nimport type { ValidationError } from 'joi'\nimport type { EncodedStructuredData } from './lib/constants_rules'\n\ninterface SerializationErrorOptions {\n  /**\n   * The cause data property of an Error instance indicates the specific original cause of the error.\n   */\n  cause?: Error\n  /**\n   * How many rows to trim from the stack trace.\n   * This is useful for removing the stack trace of the current function from the error.\n   */\n  trim?: number\n}\n\n/* v8 ignore next 62 */\nconst SerializationError = class extends TypeError {\n  /** @private */\n  readonly $__name: string\n  /** @private */\n  readonly $__message: string\n\n  constructor(name: string, message: string, options?: SerializationErrorOptions) {\n    const superOptions = options ? { cause: options.cause } : {}\n    super(message, superOptions)\n    const ErrorConstructor = this.constructor\n    Object.setPrototypeOf(this, ErrorConstructor)\n    this.$__name = name\n    this.$__message = message\n    if ('function' === typeof Error.captureStackTrace) {\n      Error.captureStackTrace(this, ErrorConstructor)\n    }\n    if ('string' !== typeof this.stack) {\n      Object.defineProperty(this, 'stack', {\n        value: '',\n        writable: true,\n        enumerable: false,\n        configurable: true,\n      })\n    }\n    if (this.stack && options && options.trim && options.trim > 0) {\n      const stackLines = this.stack.split('\\n')\n      stackLines.splice(0, options.trim)\n      this.stack = stackLines.join('\\n')\n    }\n    Object.defineProperty(this, 'name', {\n      get: () => this.$__name,\n      enumerable: true,\n      configurable: false,\n    })\n    Object.defineProperty(this, 'message', {\n      get: () => this.$__message,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /** @private */\n  get name() {\n    return this.$__name\n  }\n\n  /** @private */\n  get message() {\n    return this.$__message\n  }\n\n  /** @private */\n  get [Symbol.toStringTag]() {\n    return this.constructor.name\n  }\n\n  /** @private */\n  toString() {\n    return `${this.name}: ${this.message}`\n  }\n\n  /** @private */\n  [Symbol.toPrimitive](hint: 'number' | 'string' | 'default') {\n    switch (hint) {\n      case 'string':\n        return this.toString()\n      default:\n        return true\n    }\n  }\n\n  /** @private */\n  static [Symbol.hasInstance](instance: unknown) {\n    if ((typeof instance === 'object' && instance !== null) || typeof instance === 'function') {\n      const proto = Object.getPrototypeOf(instance)\n      return proto.name === this.name || proto === this\n    }\n    return false\n  }\n}\n\nconst messageFromJoiValidationError = (\n  reason: ValidationError | undefined,\n  fallback: string,\n  prepend?: string\n) => {\n  return reason\n    ? [\n        prepend,\n        reason.details ? reason.details.map((d) => d.message).join(' and ') : reason.message,\n      ]\n        .filter((v) => 'string' === typeof v)\n        .join(' ')\n    : fallback\n}\n\n/**\n * Thrown when the value cannot be serialized.\n */\nexport class E_PAYLOAD_UNSERIALIZABLE extends SerializationError {\n  /** @private */\n  constructor(reason: ValidationError) {\n    const msg = messageFromJoiValidationError(\n      reason,\n      'Cannot serialize this value',\n      'Cannot serialize this value:'\n    )\n    super('E_PAYLOAD_UNSERIALIZABLE', msg)\n  }\n}\n\n/**\n * Thrown when an encoding rule conflicts with default serialization rules.\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_RULE_CONFLICT extends SerializationError {\n  /** @private */\n  constructor(key: string) {\n    const msg = `Encoding rule \"${key}\" conflicts with default serialization rules.`\n    super('E_RULE_CONFLICT', msg)\n  }\n}\n\n/**\n * Thrown when a value cannot be serialized\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_VALUE_UNSERIALIZABLE extends SerializationError {\n  readonly #type: string\n  readonly #inspection: string\n  /** @private */\n  constructor(value: unknown) {\n    const msg = `Encountered an unserializable value`\n    super('E_VALUE_UNSERIALIZABLE', msg)\n    this.#type = typeof value\n    this.#inspection = ''\n    Object.defineProperty(this, 'kind', {\n      get: () => this.#type,\n      enumerable: true,\n      configurable: false,\n    })\n    Object.defineProperty(this, 'inspection', {\n      get: () => this.#inspection,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The result of the `typeof` operator on the value that caused the error.\n   */\n  get kind() {\n    return this.#type\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The result of the `inspect` function on the value that caused the error.\n   */\n  get inspection() {\n    return this.#inspection\n  }\n}\n\n/**\n * Thrown when a value cannot be serialized\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_VALUE_UNDESERIALIZABLE extends SerializationError {\n  readonly #type: EncodedStructuredData['key']\n  /** @private */\n  constructor(value: EncodedStructuredData, cause?: Error) {\n    const msg = `Encountered a value which cannot be deserialized`\n    super('E_VALUE_UNDESERIALIZABLE', msg, { cause })\n    this.#type = value.key || 'unknown'\n    Object.defineProperty(this, 'kind', {\n      get: () => this.#type,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /* v8 ignore next 7 */\n  /**\n   * The structured data key that caused the error.\n   * @remarks This is used to identify the type of the value that caused the error.\n   */\n  get kind() {\n    return this.#type || 'unknown'\n  }\n}\n\n/**\n * Thrown when a value cannot be serialized\n * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.\n */\nexport class E_VALUE_UNPARSEABLE extends SerializationError {\n  /** @private */\n  constructor(cause?: Error) {\n    const msg = `Encountered a value which cannot be parsed in order to be deserialized`\n    super('E_VALUE_UNPARSEABLE', msg, { cause })\n  }\n}\n\n/**\n * Thrown when a value which is being deserialized is from a future version of the library.\n * @remarks This error is thrown when the version of the library used to serialize the value is greater than the current version.\n * This is used to prevent deserializing values which may not be compatible with the current version of the library.\n */\nexport class E_VALUE_FROM_FUTURE_VERSION extends SerializationError {\n  readonly #version: string\n  /** @private */\n  constructor(version: string) {\n    const msg = `Value was serialized with version ${version}, but the current version is ${__VERSION__}`\n    super('E_VALUE_FROM_FUTURE_VERSION', msg)\n    this.#version = version\n    Object.defineProperty(this, 'version', {\n      get: () => this.#version,\n      enumerable: true,\n      configurable: false,\n    })\n    Object.defineProperty(this, 'current', {\n      get: () => __VERSION__,\n      enumerable: true,\n      configurable: false,\n    })\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The version that caused the error.\n   */\n  get version() {\n    return this.#version\n  }\n\n  /* v8 ignore next 6 */\n  /**\n   * The current version of the library.\n   */\n  get current() {\n    return __VERSION__\n  }\n}\n\n/**\n * Displayed when a value which is being deserialized is from a past version of the library.\n * @remarks This error is shown in the console when the version of the library used to serialize the value is less than the current version.\n * This is used to warn the user that the value may not be compatible with the current version of the library.\n */\nexport const W_VALUE_FROM_PAST_VERSION = (version: string) =>\n  new Error(\n    `Value was serialized with version ${version}, but the current version is ${__VERSION__}`\n  )\n"],"names":["SerializationError","name","message","options","superOptions","__publicField","ErrorConstructor","stackLines","hint","instance","proto","messageFromJoiValidationError","reason","fallback","prepend","d","v","E_PAYLOAD_UNSERIALIZABLE","msg","E_RULE_CONFLICT","key","E_VALUE_UNSERIALIZABLE","value","__privateAdd","_type","_inspection","__privateSet","__privateGet","E_VALUE_UNDESERIALIZABLE","cause","E_VALUE_UNPARSEABLE","E_VALUE_FROM_FUTURE_VERSION","version","_version","W_VALUE_FROM_PAST_VERSION"],"mappings":"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"}