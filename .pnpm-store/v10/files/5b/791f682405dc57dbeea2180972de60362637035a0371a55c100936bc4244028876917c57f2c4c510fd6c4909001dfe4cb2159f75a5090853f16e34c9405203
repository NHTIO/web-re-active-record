/**
 * Provides the errors for the serialization module.
 * @module @nhtio/web-serialization/errors
 */
import type { ValidationError } from 'joi';
import type { EncodedStructuredData } from './lib/constants_rules';
interface SerializationErrorOptions {
    /**
     * The cause data property of an Error instance indicates the specific original cause of the error.
     */
    cause?: Error;
    /**
     * How many rows to trim from the stack trace.
     * This is useful for removing the stack trace of the current function from the error.
     */
    trim?: number;
}
declare const SerializationError: {
    new (name: string, message: string, options?: SerializationErrorOptions): {
        /** @private */
        readonly $__name: string;
        /** @private */
        readonly $__message: string;
        /** @private */
        readonly name: string;
        /** @private */
        readonly message: string;
        /** @private */
        toString(): string;
        /** @private */
        readonly [Symbol.toStringTag]: string;
        /** @private */
        [Symbol.toPrimitive](hint: "number" | "string" | "default"): string | true;
        stack?: string;
        cause?: unknown;
    };
    /** @private */
    [Symbol.hasInstance](instance: unknown): boolean;
    captureStackTrace(targetObject: object, constructorOpt?: Function): void;
    prepareStackTrace?: ((err: Error, stackTraces: NodeJS.CallSite[]) => any) | undefined;
    stackTraceLimit: number;
};
/**
 * Thrown when the value cannot be serialized.
 */
export declare class E_PAYLOAD_UNSERIALIZABLE extends SerializationError {
    /** @private */
    constructor(reason: ValidationError);
}
/**
 * Thrown when an encoding rule conflicts with default serialization rules.
 * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.
 */
export declare class E_RULE_CONFLICT extends SerializationError {
    /** @private */
    constructor(key: string);
}
/**
 * Thrown when a value cannot be serialized
 * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.
 */
export declare class E_VALUE_UNSERIALIZABLE extends SerializationError {
    #private;
    /** @private */
    constructor(value: unknown);
    /**
     * The result of the `typeof` operator on the value that caused the error.
     */
    get kind(): string;
    /**
     * The result of the `inspect` function on the value that caused the error.
     */
    get inspection(): string;
}
/**
 * Thrown when a value cannot be serialized
 * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.
 */
export declare class E_VALUE_UNDESERIALIZABLE extends SerializationError {
    #private;
    /** @private */
    constructor(value: EncodedStructuredData, cause?: Error);
    /**
     * The structured data key that caused the error.
     * @remarks This is used to identify the type of the value that caused the error.
     */
    get kind(): string;
}
/**
 * Thrown when a value cannot be serialized
 * @remarks This error should not be thrown by the library as test the library before releasing it, but it does exist.
 */
export declare class E_VALUE_UNPARSEABLE extends SerializationError {
    /** @private */
    constructor(cause?: Error);
}
/**
 * Thrown when a value which is being deserialized is from a future version of the library.
 * @remarks This error is thrown when the version of the library used to serialize the value is greater than the current version.
 * This is used to prevent deserializing values which may not be compatible with the current version of the library.
 */
export declare class E_VALUE_FROM_FUTURE_VERSION extends SerializationError {
    #private;
    /** @private */
    constructor(version: string);
    /**
     * The version that caused the error.
     */
    get version(): string;
    /**
     * The current version of the library.
     */
    get current(): string;
}
/**
 * Displayed when a value which is being deserialized is from a past version of the library.
 * @remarks This error is shown in the console when the version of the library used to serialize the value is less than the current version.
 * This is used to warn the user that the value may not be compatible with the current version of the library.
 */
export declare const W_VALUE_FROM_PAST_VERSION: (version: string) => Error;
export {};
