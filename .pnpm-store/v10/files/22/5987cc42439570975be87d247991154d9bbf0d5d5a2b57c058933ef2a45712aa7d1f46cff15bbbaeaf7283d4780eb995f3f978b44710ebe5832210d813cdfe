/**
 * Provides a mechanism to serialize and deserialize data within a web context such as a browser window, web worker or service worker.
 * @module @nhtio/web-serialization
 */
/**
 * The current version of the package.
 */
export declare const version: string;
export { serialize, deserialize } from './lib/class_serialization';
export { canSerialize, confirm, isInstanceOf, isPlainObject, isPrimitive, } from './lib/schema_serialization';
export type * from './types';
/** @private */
export declare const schema: {
    stringSchema: import("joi").StringSchema<string>;
    numberSchema: import("joi").NumberSchema<number>;
    booleanSchema: import("joi").BooleanSchema<boolean>;
    bigintSchema: import("joi").AnySchema<any>;
    nullSchema: import("joi").AnySchema<any>;
    undefinedSchema: import("joi").AnySchema<any>;
    primitiveSchema: import("joi").AlternativesSchema<any>;
    int8ArraySchema: import("joi").AnySchema<any>;
    uint8ArraySchema: import("joi").AnySchema<any>;
    uint8ClampedArraySchema: import("joi").AnySchema<any>;
    int16ArraySchema: import("joi").AnySchema<any>;
    uint16ArraySchema: import("joi").AnySchema<any>;
    int32ArraySchema: import("joi").AnySchema<any>;
    uint32ArraySchema: import("joi").AnySchema<any>;
    float32ArraySchema: import("joi").AnySchema<any>;
    float64ArraySchema: import("joi").AnySchema<any>;
    bigInt64ArraySchema: import("joi").AnySchema<any>;
    bigUint64ArraySchema: import("joi").AnySchema<any>;
    typedArraySchema: import("joi").AlternativesSchema<any>;
    dateSchema: import("joi").AnySchema<any>;
    regExpSchema: import("joi").AnySchema<any>;
    arrayBufferSchema: import("joi").AnySchema<any>;
    dataViewSchema: import("joi").AnySchema<any>;
    errorSchema: import("joi").AnySchema<any>;
    uniterableObjectSchema: import("joi").AlternativesSchema<any>;
    luxonDateTimeSchema: import("joi").AnySchema<any>;
    luxonDurationSchema: import("joi").AnySchema<any>;
    luxonIntervalSchema: import("joi").AnySchema<any>;
    luxonSchema: import("joi").AlternativesSchema<any>;
    serializableSchema: import("joi").AlternativesSchema<any>;
    canSerialize: (value: unknown) => value is import("./types").Serializable;
    confirm: <T>(value: unknown) => T;
};
/** @private */
export declare const ValidationError: new (message: string, details: import("joi").ValidationErrorItem[], original: any) => import("joi").ValidationError;
