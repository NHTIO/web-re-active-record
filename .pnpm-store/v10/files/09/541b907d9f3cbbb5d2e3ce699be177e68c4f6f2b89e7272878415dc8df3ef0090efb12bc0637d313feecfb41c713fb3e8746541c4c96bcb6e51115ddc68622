{"version":3,"file":"index.mjs","sources":["../src/index.ts"],"sourcesContent":["/**\n * @module @nhtio/tiny-typed-emitter\n */\n\n/**\n * The current version of the package.\n */\nexport const version = __VERSION__\n\n/**\n * The default shape of the event map.\n * @typeParam T - The event map.\n */\nexport type EventMap<T> = Record<keyof T, any[]> | DefaultEventMap\n\n/**\n * The shape of the default event map.\n */\nexport type DefaultEventMap = [never]\n\n/**\n * The shape of the arguments tuple for when the default event map is used.\n * This is used to allow for any number of arguments to be passed to the event listeners.\n */\nexport type AnyRest = [...args: any[]]\n\n/**\n * The shape of the arguments tuple for a specific event.\n * @typeParam K - The event name.\n * @typeParam T - The event map.\n */\nexport type Args<K, T> = T extends DefaultEventMap ? AnyRest : K extends keyof T ? T[K] : never\n\n/**\n * A utility type used to extract the event key from the event map.\n * @typeParam K - The event name.\n * @typeParam T - The event map.\n */\nexport type Key<K, T> = T extends DefaultEventMap ? string | symbol : K | keyof T\n\n/**\n * A utility type used to extract the keys from the event map.\n * @typeParam T - The event map.\n */\nexport type Keys<T> = T extends DefaultEventMap ? string | symbol : keyof T\n\n/**\n * A utility type used to extract the shape of the listener function from the event map.\n * @typeParam K - The event name.\n * @typeParam T - The event map.\n */\nexport type Listener<K, T> = T extends DefaultEventMap\n  ? (...args: any[]) => void\n  : K extends keyof T\n    ? T[K] extends unknown[]\n      ? (...args: T[K]) => void\n      : never\n    : never\n\n/**\n * Describes the shape of the internal event listener map.\n */\nexport interface EventListenerMap {\n  [key: string | symbol]: Array<{\n    fn: (...args: any[]) => void\n    ctx: any\n  }>\n}\n\n/**\n * A strongly-typed Tiny Event Emitter.\n */\nexport class TypedEventEmitter<T extends EventMap<T> = DefaultEventMap> {\n  /**\n   * The internal event listener map for the emitter.\n   */\n  public e: EventListenerMap\n\n  /**\n   * Creates a new TypedEventEmitter instance.\n   */\n  constructor() {\n    this.e = {}\n  }\n\n  /**\n   * Subscribe to an event with a typed listener.\n   * @param event - The event name.\n   * @param listener - The listener function.\n   * @param ctx - The `this` context to apply to the listener when it is called\n   * @returns the current instance for chaining\n   */\n  on<K>(event: Key<K, T>, listener: Listener<K, T>, ctx?: any): this {\n    if (!Array.isArray(this.e[event as string | symbol])) {\n      this.e[event as string | symbol] = []\n    }\n    this.e[event as string | symbol].push({\n      fn: listener as any,\n      ctx: ctx || null,\n    })\n    return this\n  }\n\n  /**\n   * Subscribe to an event once with a typed listener.\n   * @param event - The event name.\n   * @param listener - The listener function.\n   * @param ctx - The `this` context to apply to the listener when it is called\n   * @returns the current instance for chaining\n   */\n  once<K>(event: Key<K, T>, listener: Listener<K, T>, ctx?: any): this {\n    const self = this\n    function callback() {\n      // @ts-ignore\n      listener.apply(ctx || null, arguments)\n      // @ts-ignore\n      self.off(event, callback)\n    }\n    callback._ = listener\n    // @ts-ignore\n    return this.on(event, callback, ctx)\n  }\n\n  /**\n   * Emit an event.\n   * @param event - The event name.\n   * @param args - The arguments to pass to the listeners.\n   * @returns the current instance for chaining\n   */\n  emit<K>(event: Key<K, T>, ...args: Args<K, T>): this {\n    const listeners = this.e[event as string | symbol]\n    if (Array.isArray(listeners)) {\n      listeners.forEach((listener) => {\n        listener.fn.apply(listener.ctx || null, args)\n      })\n    }\n    return this\n  }\n\n  /**\n   * Unsubscribe from an event.\n   * @param event - The event name.\n   * @param listener - Optional. The listener function to remove.\n   * @returns the current instance for chaining\n   *\n   * @remarks When no listener is provided, all listeners for the event will be removed, otherwise\n   * only the specified listener will be removed.\n   */\n  off<K>(event: Key<K, T>, listener?: Listener<K, T>): this {\n    if (Array.isArray(this.e[event as string | symbol])) {\n      if (!listener) {\n        // remove all listeners\n        this.e[event as string | symbol] = []\n      } else {\n        this.e[event as string | symbol] = this.e[event as string | symbol].filter(\n          // @ts-ignore\n          (l) => l.fn !== listener && l.fn._ !== listener\n        )\n      }\n    }\n    return this\n  }\n}\n"],"names":["version","TypedEventEmitter","__publicField","event","listener","ctx","self","callback","args","listeners","l"],"mappings":";;;AAOO,MAAMA,IAAU;AAiEhB,MAAMC,EAA2D;AAAA;AAAA;AAAA;AAAA,EAStE,cAAc;AALP;AAAA;AAAA;AAAA,IAAAC,EAAA;AAML,SAAK,IAAI;EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,GAAMC,GAAkBC,GAA0BC,GAAiB;AACjE,WAAK,MAAM,QAAQ,KAAK,EAAEF,CAAwB,CAAC,MAC5C,KAAA,EAAEA,CAAwB,IAAI,KAEhC,KAAA,EAAEA,CAAwB,EAAE,KAAK;AAAA,MACpC,IAAIC;AAAA,MACJ,KAAKC,KAAO;AAAA,IAAA,CACb,GACM;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAQF,GAAkBC,GAA0BC,GAAiB;AACnE,UAAMC,IAAO;AACb,aAASC,IAAW;AAET,MAAAH,EAAA,MAAMC,KAAO,MAAM,SAAS,GAEhCC,EAAA,IAAIH,GAAOI,CAAQ;AAAA,IAC1B;AACA,WAAAA,EAAS,IAAIH,GAEN,KAAK,GAAGD,GAAOI,GAAUF,CAAG;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAQF,MAAqBK,GAAwB;AAC7C,UAAAC,IAAY,KAAK,EAAEN,CAAwB;AAC7C,WAAA,MAAM,QAAQM,CAAS,KACfA,EAAA,QAAQ,CAACL,MAAa;AAC9B,MAAAA,EAAS,GAAG,MAAMA,EAAS,OAAO,MAAMI,CAAI;AAAA,IAAA,CAC7C,GAEI;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAOL,GAAkBC,GAAiC;AACxD,WAAI,MAAM,QAAQ,KAAK,EAAED,CAAwB,CAAC,MAC3CC,IAIH,KAAK,EAAED,CAAwB,IAAI,KAAK,EAAEA,CAAwB,EAAE;AAAA;AAAA,MAElE,CAACO,MAAMA,EAAE,OAAON,KAAYM,EAAE,GAAG,MAAMN;AAAA,IAAA,IAJpC,KAAA,EAAED,CAAwB,IAAI,KAQhC;AAAA,EACT;AACF;"}