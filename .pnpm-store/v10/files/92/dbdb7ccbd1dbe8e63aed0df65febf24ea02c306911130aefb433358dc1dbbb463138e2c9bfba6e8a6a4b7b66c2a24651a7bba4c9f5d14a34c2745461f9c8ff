import { MessageVerifier } from './class_message_verifier';
import type { EncryptionOptions, EncryptionAlgorithm, Base64 } from '../types';
import type { Serializable } from '@nhtio/web-serialization/types';
/**
 * The encryption class allows encrypting and decrypting values using `aes-256-cbc` or `aes-128-cbc`
 * algorithms. The encrypted value uses a unique iv for every encryption and this ensures semantic
 * security (read more https://en.wikipedia.org/wiki/Semantic_security).
 */
export declare class Encryption {
    #private;
    /**
     * Reference to the instance of message verifier for signing
     * and verifying values.
     */
    verifier: MessageVerifier;
    /**
     * Reference to base64 object for base64 encoding/decoding values
     */
    base64: Base64;
    /**
     * The algorithm in use
     */
    get algorithm(): EncryptionAlgorithm;
    constructor(options: EncryptionOptions);
    /**
     * Encrypt a given piece of value using the app secret. A wide range of
     * data types are supported. See [@nhtio/serialization](https://serialization.nht.io/quickstart.html#supported-data-types) for more information
     * on the supported data types.
     *
     * You can optionally define a purpose for which the value was encrypted and
     * mentioning a different purpose/no purpose during decrypt will fail.
     * @param payload - The value to encrypt
     * @param expiresIn - The time to live for the value. It can be a number or a string
     * @param purpose - The purpose for which the value was encrypted
     */
    encrypt(payload: Serializable, expiresIn?: string | number, purpose?: string): string;
    /**
     * Decrypt value and verify it against a purpose
     */
    decrypt<T>(value: string, purpose?: string): T | null;
    /**
     * Create a children instance with different secret key
     */
    child(options?: EncryptionOptions): Encryption;
    /**
     * Checks if the value can be encoded
     */
    encodable(value: unknown): value is Serializable;
    /**
     * Checks if the value can be encoded
     */
    static encodable(value: unknown): value is Serializable;
}
