import { c as a } from "../common-CU_gyL-S.mjs";
const l = a({
  name: "noUndefinedChildrenForProgrammaticComponents",
  meta: {
    type: "problem",
    docs: {
      description: "Disallow explicitly passing undefined as the children argument in calls to Vue's h function, including when a children function returns an array with undefined values."
    },
    schema: [],
    messages: {
      undefinedChildren: "The children argument of h() must not be set to undefined.",
      undefinedChildrenFunction: "The children function of h() returns an array containing undefined values."
    }
  },
  create(i) {
    function t(n) {
      return n && (n.type === "Identifier" && n.name === "undefined" || n.type === "UnaryExpression" && n.operator === "void");
    }
    function s(n) {
      for (const e of n.elements)
        if (e && (t(e) || e.type === "ConditionalExpression" && t(e.alternate)))
          return !0;
      return !1;
    }
    function o(n) {
      let e = null;
      if (n.type === "ArrowFunctionExpression" && n.expression)
        e = n.body;
      else if ((n.type === "ArrowFunctionExpression" || n.type === "FunctionExpression") && n.body && n.body.type === "BlockStatement") {
        for (const r of n.body.body)
          if (r.type === "ReturnStatement" && r.argument) {
            e = r.argument;
            break;
          }
      }
      if (!e)
        return !1;
      if (e.type === "ArrayExpression")
        return s(e);
      if (t(e))
        return !0;
      if (e.type === "CallExpression") {
        const r = e.callee;
        if (r && r.type === "MemberExpression" && r.object && r.object.type === "ArrayExpression")
          return s(r.object);
      }
      return !1;
    }
    return {
      CallExpression(n) {
        if (n.callee && n.callee.type === "Identifier" && n.callee.name === "h") {
          if (n.arguments.length < 3)
            return;
          const e = n.arguments[2];
          if (t(e)) {
            i.report({
              node: e,
              messageId: "undefinedChildren"
            });
            return;
          }
          if (e.type === "ArrayExpression" && s(e)) {
            i.report({
              node: e,
              messageId: "undefinedChildren"
            });
            return;
          }
          if ((e.type === "ArrowFunctionExpression" || e.type === "FunctionExpression") && o(e)) {
            i.report({
              node: e,
              messageId: "undefinedChildrenFunction"
            });
            return;
          }
        }
      }
    };
  },
  defaultOptions: []
});
export {
  l as default
};
//# sourceMappingURL=no_undefined_children_for_programmatic_components.mjs.map
